---
import { Send } from 'lucide-astro';
import { translations } from '../i18n/translations';

const currentLang = Astro.url.pathname.split('/')[1] || 'bs';
const t = translations[currentLang].contact;
---

<section class="w-full py-20" id="contact">
  <div class="w-full max-w-7xl mx-auto px-5">
    <!-- Header -->
    <div class="text-center mb-16 space-y-4">
      <span class="text-secondary text-sm font-medium tracking-wider uppercase">
        {t.subtitle}
      </span>
      <h2 class="text-4xl md:text-5xl font-primary font-bold text-primary">
        {t.title}
      </h2>
      <div class="w-20 h-1.5 bg-secondary rounded-full mx-auto"></div>
    </div>

    <!-- Form -->
    <div class="max-w-2xl mx-auto">
      <div class="relative group overflow-hidden">
        <!-- Form Container -->
        <div class="relative bg-white">
          <form 
            name="contact" 
            method="POST" 
            netlify
            data-netlify="true"
            netlify-honeypot="bot-field"
            data-netlify-honeypot="bot-field"
            class="space-y-6"
            id="contact-form"
          >
            <p class="hidden">
              <label>
                {t.form.dontFill}: <input name="bot-field" />
              </label>
            </p>
            <input type="hidden" name="form-name" value="contact" />
            
            <div class="relative group/input">
              <input
                type="text"
                name="name"
                placeholder={t.form.name}
                required
                class="w-full px-6 py-4 rounded-xl border-2 border-text-primary/10 focus:border-secondary 
                       outline-none transition-all duration-300 bg-transparent"
              />
            </div>

            <div class="relative group/input">
              <input
                type="email"
                name="email"
                placeholder={t.form.email}
                required
                class="w-full px-6 py-4 rounded-xl border-2 border-text-primary/10 focus:border-secondary 
                       outline-none transition-all duration-300 bg-transparent"
              />
            </div>

            <div class="relative group/input">
              <textarea
                name="message"
                placeholder={t.form.message}
                required
                rows="4"
                class="w-full px-6 py-4 rounded-xl border-2 border-text-primary/10 focus:border-secondary 
                       outline-none transition-all duration-300 bg-transparent resize-none"
              ></textarea>
            </div>
            <div data-netlify-recaptcha="true" class="captcha"></div>
            <div id="form-message" class="hidden text-center p-4 rounded-xl"></div>
            <button
              type="submit"
              class="bg-secondary text-white px-8 py-3 rounded-full font-medium inline-flex items-center gap-2 transition-all hover:gap-3"
            >
              {t.form.submit}
              <Send class="w-5 h-5" />
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ t }}>
  const form = document.querySelector('form[name="contact"]');
  const formMessage = document.getElementById('form-message');

  if (form && formMessage) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Disable submit button while submitting
      const submitButton = form.querySelector('button[type="submit"]');
      submitButton.disabled = true;

      try {
        const formData = new FormData(form);
        
        // This is critical - we need to ensure form-name is included
        formData.append("form-name", "contact");
        
        // Change to use AJAX submission with correct format
        const response = await fetch('/', {
          method: 'POST',
          body: new URLSearchParams(formData).toString(),
          headers: { 
            'Content-Type': 'application/x-www-form-urlencoded' 
          }
        });

        if (response.ok) {
          formMessage.classList.remove('hidden', 'bg-red-100', 'text-red-700');
          formMessage.classList.add('bg-green-100', 'text-green-700');
          formMessage.textContent = t.form.successMessage;
          form.reset();
          
          // Debug log - remove in production
          console.log('Form submitted successfully');
        } else {
          console.error('Form submission error:', response.status);
          throw new Error('Form submission failed');
        }
      } catch (error) {
        formMessage.classList.remove('hidden', 'bg-green-100', 'text-green-700');
        formMessage.classList.add('bg-red-100', 'text-red-700');
        formMessage.textContent = t.form.errorMessage;
        console.error('Error:', error);
      } finally {
        // Re-enable submit button
        submitButton.disabled = false;
      }
    });
  }
</script> 