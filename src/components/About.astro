---
import { Image } from 'astro:assets';
import { ArrowRight } from 'lucide-astro';
import { translations } from '../i18n/translations';
import clinicImage from '../assets/clinic.jpg';

const currentLang = Astro.url.pathname.split('/')[1] || 'bs';
const t = translations[currentLang].about;
---

<section class="w-full py-20" id="about">
  <div class="w-full max-w-7xl mx-auto px-5">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
      <!-- Image Section -->
      <div class="relative group overflow-hidden">
        <!-- Adjusted inset for mobile -->
        <div class="absolute -inset-2 md:-inset-4 bg-secondary/10 rounded-[2.5rem] -rotate-6 scale-95 transition-transform duration-300 group-hover:rotate-0"></div>
        <div class="absolute -inset-2 md:-inset-4 bg-primary/5 rounded-[2.5rem] rotate-3 scale-95 transition-transform duration-300 group-hover:rotate-0"></div>
        
        <!-- Main image container - reduced height from 600px to 500px -->
        <div class="relative h-[400px] md:h-[500px] rounded-3xl overflow-hidden shadow-xl transition-all duration-300 group-hover:shadow-2xl">
          <Image
            src={clinicImage}
            alt="MedicoOral-AS Clinic"
            width={800}
            height={500}
            class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
          />
          <!-- Gradient overlay -->
          <div class="absolute inset-0 bg-gradient-to-t from-black/30 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100"></div>
        </div>
      </div>

      <!-- Content Section -->
      <div class="space-y-8">
        <!-- Section label -->
        <span class="text-secondary text-sm font-medium tracking-wider uppercase">
          {currentLang === 'bs' ? 'Upoznajte nas' : 'Get to know us'}
        </span>

        <!-- Title -->
        <h2 class="text-4xl md:text-5xl font-primary font-bold text-primary">
          {t.title}
        </h2>

        <!-- Decorative line -->
        <div class="w-20 h-1.5 bg-secondary rounded-full"></div>
        
        <!-- Paragraphs -->
        <div class="space-y-6">
          {t.paragraphs.map(paragraph => (
            <p class="text-lg text-text-secondary/80 leading-relaxed">
              {paragraph}
            </p>
          ))}
        </div>

        <!-- Stats or highlights -->
        <div class="grid grid-cols-2 gap-8 pt-6">
          <div class="space-y-2">
            <span class="text-4xl font-bold text-secondary" data-value="40" id="years-counter">0+</span>
            <p class="text-sm text-text-secondary/70">
              {currentLang === 'bs' ? 'Godine iskustva' : 'Years of experience'}
            </p>
          </div>
          <div class="space-y-2">
            <span class="text-4xl font-bold text-secondary" data-value="5000" id="patients-counter">0+</span>
            <p class="text-sm text-text-secondary/70">
              {currentLang === 'bs' ? 'Zadovoljnih pacijenata' : 'Happy patients'}
            </p>
          </div>
        </div>

        <!-- CTA Button -->
        <button class="inline-flex items-center gap-2 px-6 py-3 bg-secondary text-white rounded-full 
                     hover:gap-4 transition-all duration-300 hover:bg-primary">
          <span>{currentLang === 'bs' ? 'Kontaktirajte nas' : 'Contact us'}</span>
          <ArrowRight class="w-5 h-5" aria-hidden="true" />
        </button>
      </div>
    </div>
  </div>
</section>

<script>
  const animateValue = (obj, start, end, duration) => {
    let startTimestamp = null;
    const step = (timestamp) => {
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
      obj.innerHTML = Math.floor(progress * (end - start) + start) + '+';
      if (progress < 1) {
        window.requestAnimationFrame(step);
      }
    };
    window.requestAnimationFrame(step);
  };

  // Intersection Observer for triggering animations
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const el = entry.target;
        const value = parseInt(el.dataset.value);
        animateValue(el, 0, value, 2000);
        observer.unobserve(el);
      }
    });
  }, { threshold: 0.5 });

  // Observe counter elements
  document.getElementById('years-counter') && observer.observe(document.getElementById('years-counter'));
  document.getElementById('patients-counter') && observer.observe(document.getElementById('patients-counter'));
</script>